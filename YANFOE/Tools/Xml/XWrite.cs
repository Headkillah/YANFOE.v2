// --------------------------------------------------------------------------------------------------------------------
// <copyright file="XWrite.cs" company="The YANFOE Project">
//   Copyright 2011 The YANFOE Project
// </copyright>
// <license>
//   This software is licensed under a Creative Commons License
//   Attribution-NonCommercial-ShareAlike 3.0 Unported (CC BY-NC-SA 3.0) 
//   http://creativecommons.org/licenses/by-nc-sa/3.0/
//   See this page: http://www.yanfoe.com/license
//   For any reuse or distribution, you must make clear to others the 
//   license terms of this work.  
// </license>
// --------------------------------------------------------------------------------------------------------------------

namespace YANFOE.Tools.Xml
{
    using System;
    using System.Globalization;
    using System.IO;
    using System.Text;
    using System.Xml;

    /// <summary>
    /// XmlDocument helper class to write to an Xmldocument object.
    /// </summary>
    public static class XWrite
    {
        #region Public Methods

        /// <summary>
        /// Writes the end of the xml document.
        /// </summary>
        /// <param name="xmlTextWriter">
        /// The XmlTextWriter Object..
        /// </param>
        public static void EndDocument(XmlWriter xmlTextWriter)
        {
            xmlTextWriter.WriteEndDocument();
        }

        /// <summary>
        /// Writes the start of the xml document.
        /// </summary>
        /// <param name="type">
        /// The type.
        /// </param>
        /// <param name="softwareName">
        /// Name of the software.
        /// </param>
        /// <param name="versionNumber">
        /// The version number.
        /// </param>
        /// <param name="encoding">
        /// The XML encoding type (Default = UTF-8)
        /// </param>
        public static XmlWriter StartDocument(
            string type, string softwareName, string versionNumber, string encoding = "UTF-8")
        {
            Encoding encode = Encoding.GetEncoding(encoding);
            var stream = new MemoryStream();
            var xmlTextWriter = new XmlTextWriter(stream, encode);

            xmlTextWriter.WriteStartDocument();
            xmlTextWriter.WriteComment(
                string.Format(
                    CultureInfo.CurrentCulture, 
                    "{0} XML Generated by {1} ({2}) - {3}", 
                    type, 
                    softwareName, 
                    versionNumber, 
                    DateTime.Now));
            xmlTextWriter.Formatting = Formatting.Indented;

            return xmlTextWriter;
        }

        /// <summary>
        /// Writes the enclosed element.
        /// </summary>
        /// <param name="xmlTextWriter">
        /// The XmlTextWriter object
        /// </param>
        /// <param name="name">
        /// The XML item name
        /// </param>
        /// <param name="value">
        /// The XML item value
        /// </param>
        /// <param name="attributeName">
        /// Name of an attribute (Can be null).
        /// </param>
        /// <param name="attributeValue">
        /// The attribute value (Can be null).
        /// </param>
        /// <param name="writeEmptyTags">
        /// if set to <c>true</c> [write empty tags].
        /// </param>
        /// <param name="emptyIfValueIs">
        /// The empty If Value Is.
        /// </param>
        public static void WriteEnclosedElement(
            XmlWriter xmlTextWriter, 
            string name, 
            dynamic value, 
            string attributeName = null, 
            string attributeValue = null, 
            bool writeEmptyTags = false, 
            string emptyIfValueIs = null)
        {
            if (value == null || string.IsNullOrEmpty(value.ToString()) || value.ToString() == "0")
            {
                return;
            }

            if (emptyIfValueIs != null)
            {
                if (value.ToString() == emptyIfValueIs)
                {
                    value = string.Empty;
                }
            }

            value = value.ToString();

            if (attributeName == null || attributeValue == null)
            {
                attributeName = string.Empty;
            }

            if (!string.IsNullOrEmpty(value))
            {
                value = value.Replace("#", "&#35;");

                xmlTextWriter.WriteStartElement(name);

                if (!string.IsNullOrEmpty(attributeName) && !string.IsNullOrEmpty(attributeValue))
                {
                    xmlTextWriter.WriteAttributeString(attributeName, attributeValue);
                }

                xmlTextWriter.WriteString(value.Trim());
                xmlTextWriter.WriteEndElement();
            }
            else if (!writeEmptyTags)
            {
                xmlTextWriter.WriteStartElement(name);
                xmlTextWriter.WriteEndElement();
            }
        }

        #endregion
    }
}